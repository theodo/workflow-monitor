service:
  name: ${env:SERVICE_NAME}

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-optimize
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    host: 0.0.0.0
    port: 4000
    websocketPort: 4001


provider:
  name: aws
  runtime: nodejs10.x
  region: ${env:REGION}
  stage: ${env:NODE_ENV}
#  vpc:
#    securityGroupIds:
#      - ${env:SECURITY_GROUP}
#    subnetIds:
#      - ${env:SUBNET_1}
#      - ${env:SUBNET_2}
#      - ${env:SUBNET_3}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: 'arn:aws:execute-api:*:*:*/development/POST/@connections/*'

package:
  include:
    - src/**/*.graphql

functions:
  api:
    handler: src/nestjs/lambda.handler
    events:
      - http:
          method: any
          path: /{proxy+}

  ws-default:
    handler: src/ws-default/lambda.handler
    events:
      - websocket:
          route: $default
  ws-diconnect:
    handler: src/ws-disconnect/lambda.handler
    events:
      - websocket:
          route: $disconnect

resources:
  Resources:
    RDS:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBInstanceIdentifier: ${env:SERVICE_NAME}-database
        DBName: ${env:SERVICE_PREFIX}DataBase
        AllocatedStorage: '20'
        DBInstanceClass: db.t3.micro
        Engine: postgres
        MasterUsername: ${env:DB_USER}
        MasterUserPassword: ${env:DB_PASSWORD}

  Outputs:
    JDBCConnectionString:
      Description: JDBC connection string for the database
      Value: !Join
        - ''
        - - 'jdbc:mysql://'
          - !GetAtt
            - RDS
            - Endpoint.Address
          - ':'
          - !GetAtt
            - RDS
            - Endpoint.Port
          - /
          - ${env:SERVICE_NAME}-database
      Export:
        Name: JDBCConnectionString

