server {
    listen 80;
    server_name {{ inventory_hostname }};

    ##
    # Redirect to the same URL with https://
    ##
    return 301 https://$server_name$request_uri;
}

upstream websocketserver {
  server localhost:4000;
}

server {
    listen 443 ssl http2;
    server_name  {{ inventory_hostname }};

    # Configure the Certificate and Key you got from your CA (e.g. Lets Encrypt)
    ssl on;
    ssl_certificate {{ certbot_output_dir }}/cert.pem;
    ssl_certificate_key {{ certbot_output_dir }}/privkey.pem;

    # Only use TLS v1.2 as Transport Security Protocol
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;

    # Only use ciphersuites that are considered modern and secure by Mozilla
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';

    # Do not let attackers downgrade the ciphersuites in Client Hello
    # Always use server-side offered ciphersuites
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # Uncomment if you want to use your own Diffie-Hellman parameter, which can be generated with: openssl ecparam -genkey -out dhparam.pem -name prime256v1
    # See https://wiki.mozilla.org/Security/Server_Side_TLS#DHE_handshake_and_dhparam
    ssl_dhparam /etc/nginx/dhparams.pem;

    # OCSP Configuration START
    # If you want to provide OCSP Stapling, you can uncomment the following lines
    # See https://www.digitalocean.com/community/tutorials/how-to-configure-ocsp-stapling-on-apache-and-nginx for more infos about OCSP and its use case
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs (you will get this file from your CA)
    # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

    # OCSP Configuration END

    root /var/www/{{ project_name }}/current/build;

    error_log /var/log/nginx/{{ project_name }}.error.log debug;
    access_log /var/log/nginx/{{ project_name }}.access.log;

    # index build/index.html
    gzip            on;
    gzip_min_length 1000;
    gzip_comp_level 9;
    gzip_proxied    any;
    gzip_types      application/javascript application/x-javascript application/json text/css;

    location /api/ {
        proxy_pass         https://websocketserver/;
        proxy_set_header   Host $http_host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection "upgrade";

       proxy_http_version 1.1;
       proxy_redirect http:// https://;
    }
}
